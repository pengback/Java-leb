<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.5.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-lazy-init="true">
    <description>Spring公共配置</description>

    <!-- 定义受环境影响易变的变量 -->
    <bean id="propertyPlaceHolder"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <!--<value>classpath:application.xml</value>-->
                <value>classpath:application.properties</value>
            </list>
        </property>
    </bean>
    <!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
    <context:component-scan base-package="com.ali.leb.sso">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <mvc:annotation-driven/>
    <context:annotation-config/>

    <!-- 配置C3P0数据源 -->
    <!--<bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
    <bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--驱动类名 -->
        <property name="driverClass" value="${jdbc.driver}"></property>
        <!--<property name="driverClass" value="com.mysql.jdbc.Driver"/>-->
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数  -->
        <property name="acquireIncrement" value="5"></property>
        <!-- 初始连接池大小 -->
        <property name="initialPoolSize" value="10"></property>
        <!-- 连接池中连接最小个数 -->
        <property name="minPoolSize" value="5"></property>
        <!-- 连接池中连接最大个数 -->
        <property name="maxPoolSize" value="20"></property>
    </bean>

    <!--<bean id="datasource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">-->
    <!--<property name="driverClassName" value="${jdbc.driver}"/>-->
    <!--<property name="url" value="${jdbc.url}"/>-->
    <!--<property name="username" value="${jdbc.username}"/>-->
    <!--<property name="password" value="${jdbc.password}"/>-->
    <!--</bean>-->

    <!-- 会话工厂bean sqlSessionFactoryBean -->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="datasource"></property>
        <!-- 别名 -->
        <property name="typeAliasesPackage" value="com.ali.leb.sso.core.entity"></property>
        <!-- sql映射文件路径 -->
        <property name="mapperLocations" value="classpath*:mapper/*.xml"></property>
        <!-- 加载Mybatis全局配置文件 -->
        <property name="configLocation" value="classpath:mybatis_config.xml"/>
        <property name="plugins">
            <list>
                <!-- 注册分页插件 -->
                <!-- 注入 SQL 性能分析插件，建议在开发环境中使用，可以在控制台查看 SQL 执行日志 -->
                <bean class="com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor">
                    <property name="maxTime" value="3000"/>
                    <!--SQL 是否格式化 默认false-->
                    <property name="format" value="true"/>
                </bean>
            </list>
        </property>
        <!-- 全局配置注入 -->
        <property name="globalConfig" ref="globalConfig"/>
    </bean>
    <bean id="globalConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig">
        <property name="dbConfig" ref="dbConfig"/>
    </bean>
    <bean id="dbConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig">
        <property name="keyGenerator" ref="keyGenerator"/>
    </bean>
    <bean id="keyGenerator" class="com.baomidou.mybatisplus.extension.incrementer.H2KeyGenerator"/>


    <!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <!-- 使用MapperScannerConfigurer需要注意 default-autowire="byName" 不能!不能!配置 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <!--<property name="sqlSessionFactoryBeanNaing.malue="sqlSessionFactory"/>-->
        <!-- 给出需要扫描mapper接口包 -->
        <property name="basePackage" value="com.ali.leb.sso.core.mapper"/>
        <!--<property name="annotationClass" value="org.springframework.stereotype.Repository"/>-->
    </bean>

    <!--<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">-->
    <!--<constructor-arg index="0" ref="sqlSessionFactory"/>-->
    <!--<constructor-arg index="1" value="BATCH" />-->
    <!--</bean>-->


    <!-- 声明式事务管理 -->
    <!--定义事物管理器，由spring管理事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"></property>
    </bean>


    <!--&lt;!&ndash;支持注解驱动的事务管理，指定事务管理器 &ndash;&gt;-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--aspectj支持自动代理实现AOP功能 -->
    <!--<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>-->

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${cache.redis.maxActive}"/>
        <property name="maxIdle" value="${cache.redis.maxIdle}"/>
        <property name="maxWaitMillis" value="${cache.redis.maxWait}"/>
        <property name="testOnBorrow" value="${cache.redis.testOnBorrow}"/>
    </bean>

    <!--RedisCacheHandle start-->
    <!--<bean id="jedisPool" class="redis.clients.jedis.JedisPool">-->
    <!--<constructor-arg index="0" ref="jedisPoolConfig" />-->
    <!--<constructor-arg index="1" value="${cache.redis.host}" />-->
    <!--<constructor-arg index="2" value="${cache.redis.port}" type="int" />-->
    <!--<constructor-arg index="3" value="${cache.redis.timeout}" type="int" />-->
    <!--<constructor-arg index="4" value="${cache.redis.password}" />-->
    <!--<constructor-arg index="5" value="${cache.redis.db}" type="int" />-->
    <!--</bean>-->
    <!--<bean id="JedisCacheHandle" class="com.ali.leb.base.cache.JedisCacheHandle">-->
    <!--<property name="jedisPool" ref="jedisPool"/>-->
    <!--</bean>-->
    <!--RedisCacheHandle end-->

    <!--JedisCacheHandle start-->
    <bean id="redisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="usePool" value="true"></property>
        <property name="hostName" value="${cache.redis.host}"/>
        <property name="port" value="${cache.redis.port}"/>
        <property name="password" value="${cache.redis.password}"/>
        <property name="timeout" value="${cache.redis.timeout}"/>
        <property name="database" value="${cache.redis.db}"></property>
        <constructor-arg index="0" ref="jedisPoolConfig"/>
    </bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="redisConnectionFactory"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
    </bean>
    <bean id="stringRedisSerializer"
          class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <!-- 设置Redis读写工具 -->
    <bean id="redisCacheHandle" class="com.ali.leb.base.cache.RedisCacheHandle">
        <property name="redisTemplate" ref="redisTemplate"></property>
    </bean>
    <!--JedisCacheHandle end-->

    <!--继承sso-->
    <bean id="ssoFilteConfig" class="com.ali.leb.sso.core.filter.SsoFilterConfig">
        <property name="ssoServerHost" value="http://127.0.0.1"/>
        <property name="ssoServerPort" value="8087"/>
        <property name="ssoServerName" value="sso-server"/>
        <property name="redisCacheHandle" ref="redisCacheHandle"/>
    </bean>

</beans>